#!/bin/bash
# ----------------------------------------------------------------------------
# @file cpiofrom
# Wrapper for cpio'ing a remote dir structure over ssh 
# @see color
# @author Alister Lewis-Bowen [alister@different.com]
# ----------------------------------------------------------------------------
# This software is distributed under the the MIT License.
#
# Copyright (c) 2008 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ----------------------------------------------------------------------------

_PWD=$PWD;
REMOTE_PATH=$1;
REMOTE_USER=$2;
REMOTE_HOST=$3
LOG=/tmp/cpioto.log;

function help {
        echo;
        echo "$(color bd)Wrapper for cpio to transfer a remote dir structure to this machine via ssh.$(color)";
        echo;
        echo 'Usage:';
        echo "$(color bd)color$(color) [ $(color ul)effect$(color) ] [ [lt]$(color ul)fgcolor$(color) ] [ $(color ul)bgcolor$(color) ]";
        echo "$(color bd)color$(color) list";
        echo "$(color bd)color$(color) [ -h | --help ]";
        echo;
        echo 'where:';
        echo -n "$(color ul)fgcolor$(color) and $(color ul)bgcolor$(color) are one of ";
        for ((i=0;i<${NUM_COLORS};i++)); do
                echo -n "$(color ${COLORS[${i}]})${COLORS[${i}]}$(color) ";
        done;
        echo;
        echo -n "$(color ul)effect$(color) can be any of ";
        for ((i=0;i<${NUM_EFFECTS};i++)); do
                echo -n "$(color ${EFFECTS[${i}]})${EFFECTS[${i}]}$(color) ";
        done;
        echo;
        echo "Preceed the $(color ul)fgcolor$(color) with $(color bd)lt$(color) to use a light color."
        echo "$(color bd)color off$(color) or $(color bd)color$(color) resets to default colors and text effect.";
        echo "$(color bd)color list$(color) displays all possible color combinations.";
        echo;
        echo 'Examples:';
        echo '  echo "$(color ul)Underlined text$(color off)"';
        echo 'results in:';
        echo "  $(color ul)Underlined text$(color off)";
        echo;
        echo '  echo "Make $(color rv)this$(color nm) reverse video text$(color off)"';
        echo 'results in:';
        echo "  Make $(color rv)this$(color nm) reverse video text$(color off)";
        echo;
        echo '  echo "$(color white blue) White text on a blue background $(color)"';
        echo 'results in:';
        echo "  $(color white blue) White text on a blue background $(color)";
        echo;
        echo '  echo "$(color ltyellow green) lt prefix on the yellow text text $(color off)"';
        echo 'results in:';
        echo "  $(color ltyellow green) lt prefix on the yellow text text $(color off)";
        echo;
        echo '  echo "$(color bold blink red yellow) Blinking bold red text on a yellow background $(color)"';
        echo 'results in:';
        echo "  $(color bold blink red yellow) Blinking bold red text on a yellow background $(color)";
        echo;
        echo;
        echo -n "Note that results may vary with these standard ANSI escape sequences because of the different configurations of terminal emulators. ";
        echo;
        exit 1;
}

ssh $REMOTE_USER@$REMOTE_HOST "find $REMOTE_PATH -depth -print | cpio -oaV" | cpio -imVd

exit 0;
