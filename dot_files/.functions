#!/bin/bash
# @file .functions
# ★  Carrybag functions
# @author Alister Lewis-Bowen <alister@different.com>
# @see .bashrc

#
# List usage metadata from carrybag dot files of the format:
# @usage carrybag ... list commands provided by carrybag
#

carrybag () {
    #            0        1         2         3         4
    #            1234567890123456789012345678901234567890
    local _line='..........................'
    local _base=$(dirname $(\ls -l ~/.functions | awk '{print $11}'))
    local _usage _cmd _sum
    local _os='osx'
    [ $(uname | grep -c 'Linux') -gt 0 ] && _os='linux'
    local _data=$(find $_base | grep -v 'vim/backup' | grep -v $_os | \
            cut -d':' -f1 | xargs grep -s '# @usage' | \
            awk '{ sub(/.*# @usage /,""); print }' | \
            grep -v 'xargs grep' | grep -v '); print' | sort)
    IFS=$'\n'
    for _usage in $_data; do
        _usage=${_usage#*@usage }
        _cmd=${_usage%% ...*}
        _sum=${_usage#*... }
        printf "$(color bd)%s$(color) %s %s\n" $_cmd ${_line:${#_cmd}} $_sum
    done
    unset IFS
}

#
# @usage banner [message] ... show host name with any other optional message
# like a legal disclaimer, e.g. Any malicious and/or unauthorized activity is
# strictly forbidden. All activity may be logged by [Org Name].
# Useful when creating a motd with some default banner.
#

banner () {
    hostname -s | figlet
    echo
    echo "Welcome to $(hostname)."
    [[ ! -z "$1" ]] && echo -e "$1"
    echo
}

#
# @usage compress file/dir ... tar-gzip a file or directory
#

compress () {
    local source="$1"
    local file files archive
    _setHelp 'compress file/dir' 'tar-gzip a file or directory'

    if [ -s "$source" ]; then
        archive=$(basename "$source")
        files="$source"

        # for multiple files...
        if [ ! -d "$source" ]; then
            if [ $(ls "$source"|wc -l) -gt '2' ]; then
                archive=$(basename $(dirname "$source"))
                files=''
                for file in $(ls "$source"); do
                    files=$files' '$file
                done
                source=$files
            fi
        fi

        tar -czvf ${archive}.tar.gz $files
    fi
}

#
# @usage uncompress file/dir ... un-archive a tar.gz file
#

uncompress () { [ -s "$1" ] && tar -xzvf "$1" ; }

#
# @usage todir string ... mkdir and cd into it
#

todir () { mkdir -p $1 && cd $1 ; }

#
# @usage ffile string ... find a file from this directory down
#

ffile () { find . | grep -i --color=always "$1" 2>/dev/null ;  }

#
# @usage ftext string ... find text in files from this directory down
#

ftext () { find . | xargs grep -i -C 2 --color=always "$1" 2>/dev/null; }

#
# @usage fproc string ... find a process matching the given string
#

fproc () { ps aux | grep "$1" | grep -v 'grep' ; }

#
# @usage kproc string ... kill a set of processes matching the given string
#

kproc () { fproc "$@" | awk '{print $2}' | xargs kill -9 ; }

#
# @usage rproc string ... HUP a set of processes matching the given string
#

rproc () { fproc "$@" | awk '{print $2}' | xargs kill -HUP ; }

#
# @usage webserv ... instant httpd from current dir
#

webserv () {
    kproc SimpleHTTPServer # HUPing the python module doesn't work
    python -m SimpleHTTPServer $@
}

#
# @usage sshkey ... display public rsa key or create ssh keys if none found
#

sshkey () {
    if [ -e ~/.ssh/id_rsa.pub ]; then
        cat ~/.ssh/id_rsa.pub
    else
        local answer
        echo -n "You don't have a public key. Want to create one? (Y/N): ";
        read answer
        case "$answer" in
            y|Y)
                type ssh-keygen >/dev/null 2>&1 ||
                    { echo >&2 "ssh-keygen is not installed."; exit 1; }
                ssh-keygen -t rsa -C "${USER}@${HOSTNAME}"
                ;;
        esac
    fi
}

#
# @usage ips [interface] ... list ips available on this machines NICs
#

ips () { ifconfig $1 | grep 'inet ' | awk '{print $2}' | grep -v 127.0.0.1 ; }

#
# @usage end file ... show the last 100 lines of a given file
#

end () { tail -n100 $1; }

#
# @usage bman command ... show bash help or a built-in command
#

bman () { man bash | less -p "^       $1 "; }

#
# @usage presicion value [number] ... round off to the number of digits after the decimal point in the value provided. Number defaults to 2
#

precision () { p=${2:-2}; printf "%.${p}f" $1; }

#
# @usage max numbers ... maximum of the numbers provided
#

max () {
    local m=0
    for n in $@; do
        m=$(echo "if ($m > $n) print \"$m\\n\" else print \"$n\\n\" " | bc -l)
    done
    echo $m
}

#
# @usage min numbers ... minimum of the numbers given
#

min () {
    local m=$1
    for n in $@; do
        m=$(echo "if ($m < $n) print \"$m\\n\" else print \"$n\\n\" " | bc -l)
    done
    echo $m
}

#
# @usage ave numbers ... average of the numbers given
#

ave () { t=0; for n in $@; do t=$(echo $t+$n | bc ); done; echo "$t/$#" | bc -l; }

#
# @usage hex2rgb hex ... convert hex color to rgb
#

hex2rgb () {
    local hex=$(echo $1 | tr '[:lower:]' '[:upper:]')
    local r=$(echo "ibase=16; $(echo $hex | cut -c -2)" | bc -l)
    local g=$(echo "ibase=16; $(echo $hex | cut -c 3-4)" | bc -l)
    local b=$(echo "ibase=16; $(echo $hex | cut -c 5-6)" | bc -l)
    echo "($r, $g, $b)"
}

#
# @usage rgb2hex rgb ... convert rgb color to hex
#

rgb2hex () {
    local hex=$(python -c "print '#%02x%02x%02x' % (${1:-0}, ${2:-0}, ${3:-0})")
    echo -n $hex | pbcopy
    echo $hex
}

#
# @usage rgb2hsl rgb ... convert rgb color to hsl
#

rgb2hsl () {
    local r=$(echo "$1/255" | bc -l)
    local g=$(echo "$2/255" | bc -l)
    local b=$(echo "$3/255" | bc -l)
    local _min=$(min $r $g $b)
    local _max=$(max $r $g $b)
    local delta=$(echo "$_max-$_min" | bc -l)
    local deltaR=0
    local deltaG=0
    local deltaB=0
    local h=0
    local s=0
    local l=$(echo "($_max+$_min) / 2" | bc -l)
    [ $(echo "if ($delta!=0) 1 else 0" | bc -l) -eq '1' ] && {
        s=$(echo "if ($l<0.5) $delta/($_max+$_min) else $delta/(2-$_max-$_min)" | bc -l)
        deltaR=$(echo "((($_max-$r)/6)+($delta/2))/$delta" | bc -l)
        deltaG=$(echo "((($_max-$g)/6)+($delta/2))/$delta" | bc -l)
        deltaB=$(echo "((($_max-$b)/6)+($delta/2))/$delta" | bc -l)
        if [ $(echo "if ($r==$_max) 1 else 0" | bc -l) -eq '1' ]; then
            h=$(echo "$deltaB-$deltaG" | bc -l)
        elif [ $(echo "if ($g==$_max) 1 else 0" | bc -l) -eq '1' ]; then
            h=$(echo "(1/3)+$deltaR-$deltaB" | bc -l)
        elif [ $(echo "if ($b==$_max) 1 else 0" | bc -l) -eq '1' ]; then
            h=$(echo "(2/3)+$deltaG-$deltaR" | bc -l)
        fi
        h=$(echo "if ($h<0) $h+1 else $h" | bc -l)
        h=$(echo "if ($h>1) $h-1 else $h" | bc -l)
    }
    local hDegrees=$(echo "360*$h" | bc -l)
    local sPercent=$(echo "100*$s" | bc -l)
    local lPercent=$(echo "100*$l" | bc -l)
    echo $(precision $hDegrees 0)'°' $(precision $sPercent 0)'%' $(precision $lPercent 0)'%'
    echo "($(precision $h), $(precision $s), $(precision $l))"
}

#
# @usage d2h decimal_number ... convert base-10 to base-16
#

d2h () { echo 'obase=16;'$@ | bc -l; }

#
# @usage h2d hexidecimal_number ... convert base-16 to base-10
#

h2d () { echo 'obase=10;ibase=16;'$( echo $@ | tr '[a-f]' '[A-F]' ) | bc -l; }

#
# @usage d2b decimal_number ... convert base-10 to base-2
#

d2b () { echo 'obase=2;'$@ | bc -l; }

#
# @usage b2d binary_number ... convert base-2 to base-10
#

b2d () { echo 'obase=10;ibase=2;'$@ | bc -l; }

#
# @usage h2b hexidecimal_number ... convert base-16 to base-2
#

h2b () { d2b $(h2d $@); }

#
# @usage b2h binary_number ... convert base-2 to base-16
#

b2h () { d2h $(b2d $@); }

#
# @usage rcsedit file ... rcs wrapped edit
#

rcsedit () {
    if [ "$(command -v rcs)" == "" ]; then
        [ ! -e $(dirname $1)/RCS ] && mkdir $(dirname $1)/RCS   # Create RCS dir next to file
        co -l $1; $EDITOR $1; ci $1; co $1                      # rcs wrapped edit
    else
        $EDITOR $1;                                             # Regular edit if rcs not installed
    fi
}

#
# @usage cleanup file ... clean out tabs, trailing spaces, carriage returns, etc.
#
# DOS, Windows   0D 0A   (\r\n)
# UNIX           0A      (\n)
# Machintosh     0D      (\r)
#

cleanup () {
    cp $1 $1.bak
    local tmp=$(mktemp -t ${RANDOM})
    cat $1 | \
        perl -pe 'if (defined $x && /\S/) { print $x; $x = ""; } $x .= "\n" x chomp; s/\s*?$//; if (eof) { print "\n"; $x = ""; }' | \
        perl -pe 's/\t/    /g' | \
        perl -pe 's/\r\n$/\n/g' | \
        perl -pe 's/\r$/\n/g' \
        > $tmp
    mv $tmp $1
}

#
# @usage rotate file ... typical rotate backup command up to a max of 30 files
#

rotate () {
    local _file=$1
    local _max="30"
    [ -f $_file ] && {
        while [ $_max -gt 0 ]; do
            [ -f $_file.$[$_max-1] ] && mv $_file.$[$_max-1] $_file.$_max
            ((_max--))
        done
        mv $_file $_file.0
    }
    cat /dev/null > $_file
}

#
# @usage watch [seconds] command ... execute a command periodically, showing output fullscreen
# NOTE: If an alias is messing with your command then apply a backslash before it
#

watch () {
    local delay=0
    if [ $# -gt 1 ]; then delay=$1; shift; fi
    while :; do clear; eval "$@"; sleep $delay; done
}

#
# @usage mondir [seconds] command ... execute the command if a file changes or is added in the current directory
# NOTE: If an alias is messing with your command then apply a backslash before it
#

mondir () {
    rm -f /tmp/${TMPFILE_TMPL//[X]}*
    local last=$(mktemp /tmp/$TMPFILE_TMPL)
    local delay=2
    local diff=''
    if [ $# -gt 1 ]; then delay=$1; shift; fi
    echo; echo "$(color white blue)Monitoring $(pwd) for file changes and additions every $delay seconds...$(color)"
    sleep $delay
    while :; do
        diff=$(find . -newer $last -type f  | grep -v ".DS_Store\|.svn\|.git\|.vim/backup")
        [ $(echo $diff | grep './' | wc -l | awk '{print $1}') -gt '0' ] && {
            touch $last
            echo
            echo "$(color black green)Files changed at $(date):$(color)"
            echo "$(color white green)$diff$(color)"
            echo
            echo "$(color black blue)Triggering command...$(color)"
            eval "$@"
        }
        sleep $delay
    done
}

#
# @usage ml source_file target_dir ... move a file then link it back to original place
#

ml () {
    local _source=$1
    local _target=$2
    local _file=$(basename $_source)
    [ -f $_target/$_file ] && rotate $_target/$_file
    mv $_source $_target
    ln -sf $_target/$_file $_source
}

#
# @usage cfn filename ... clean up a filename
#

cfn () {
    local file="$@"
    mv -v "$file" $(echo "$file" | tr ' ' '_' | tr -d '[{}(),\!]' | \
        tr -d "\'" | tr '[A-Z]' '[a-z]' | sed 's/_-_/_/g')
}

#
# Additional function customizations/overrides
#

[ -f ~/.functions_local ] && . ~/.functions_local
