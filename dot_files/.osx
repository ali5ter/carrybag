#!/bin/bash
# @file .osx
# ★  Carrybag osx tweeks
# @author Alister Lewis-Bowen <alister@different.com>
# @see https://github.com/mathiasbynens/dotfiles/blob/master/.osx
# @see .bashrc


#
# Colors
#

export CLICOLOR=1

#
# Path exports
#

export PATH=/usr/local/bin:$PATH            # include Homebrew packages
[ -d /Developer ] &&  export PATH=/Developer/Tools:/Developer/Applications:$PATH
[ -d /Applications/MAMP ] && export PATH=/Applications/MAMP/Library/bin:$PATH
export JAVA_HOME=$(/usr/libexec/java_home)  # using XCode command line tools util
export PYTHONPATH=/usr/local/lib/python2.7/site-packages
export PATH=/usr/local/heroku/bin:$PATH     # include Heroku Toolbelt
[ -d '/Applications/ADT Bundle Mac' ] && {    # Android dev tools
    export PATH='/Applications/ADT Bundle Mac/sdk/platform-tools':$PATH
    export PATH='/Applications/ADT Bundle Mac/sdk/tools':$PATH
}
export PERL_MB_OPT="--install_base \"$HOME/perl5\""
export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"

#
# Aliases
#

alias ls='ls -ltFG $*'
alias wget='curl -CO'    # since curl is native to OSX

#
# System tweeks
#

chflags nohidden ~/Library  # don't hide the Library dir

#
# Voice greeting
#

_greeting () {
    local h=$(date +"%k")
    [ -z "$USER" ] && {
        say -v Vicki "Running $(basename $0)"
    } || {
        [[ $h -ge 0 && $h -lt 12 ]] && {
            say -v Vicki "Good morning $USER"; return
        } || {
            [[ $h -ge 12 && $h -lt 18 ]] && {
                say -v Vicki "Good afternoon $USER"; return
            } || {
                say -v Vicki "Good evening $USER"
            }
        }
    }
}

_greeting

#
# Helper to install cmdl app
#

_install () {
    local cmd=$1; shift
    local install="$@"
    [ -z $(type -p $cmd) ] && {
        local msg="Can I install $cmd for you?"
        say "$msg"
        read -p "$(color yellow)$msg$(color) [Y/n] "
        [ "$REPLY" == "Y" ] \
            && { say 'Ok. Installing'; $($install); } \
            || say 'Ok'
    }
}

#
# @usage bootstrap ... attempt to install software we need
#

bootstrap () {

    local msg="Shall I bootstrap your system for you?"
    say "$msg"
    read -p "$(color yellow)$msg$(color) [Y/n] "
    [ "$REPLY" != "Y" ] && { say 'Ok'; return 0; }
    say 'Ok. Attempting to bootstrap your system'

    # Bootstrapping some apps using homebrew
    # @see http://mxcl.github.com/homebrew/

    [ -z $(type -p brew) ] && ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
        _install git brew install git
    [ ! -f $(brew --prefix)/etc/bash_completion ] && brew install bash-completion
    [ ! -f $(brew --prefix)/bin/ctags ] && brew install ctags-exuberant
    _install figlet brew install figlet
    _install webkit2png brew install webkit2png
    _install icalBuddy brew install ical-buddy
    _install html2text brew install html2text
    [ -e /Applications/Xcode.app ] && { _install mogenerator brew install mogenerator; }

    # Bootstrapping some apps using npm
    # @see https://github.com/joyent/node/wiki/installation
    # Can also check what's installed using 'npm ls --global --depth 0'

    [ -z $(type -p node) ] && { echo 'Install node from nodejs.org'; } \
    || {
        _install jshint sudo npm install jshint -g
        _install node-inspector sudo npm install node-inspector -g
        _install nodemon sudo npm install nodemon -g
        _install http-server sudo npm install http-server -g
        _install ws sudo npm install ws -g
    }
}

#
# Carrybag assumes bash completion is installed using Homebrew
# @see https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion
#

[ -f $(brew --prefix)/etc/bash_completion ] && . $(brew --prefix)/etc/bash_completion

#
# Include git completion config and custom prompt for git dev
#

[ -e /Applications/Xcode.app/Contents/Developer/usr/share/git-core ] && {
    source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash
    source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-prompt.sh
    PS1='
$(color cyan)\@ \
$( [ -e ~/.meetingAlert ] && cat ~/.meetingAlert) \
$(color yellow)\u@\h \
$(color bold white)\W\
$(__git_ps1 " $(color white magenta) %s $(color)") \
$([ $(jobs -p | wc -l) -gt '0' ] && echo -n "$(color red)●" || echo -n "○") \
$(color)
〉'
}

#
# @usage drush ... manipulating Drupal installations
#

[ -e ~/bin/drush ] && alias drush='php ~/bin/drush/drush.php'

#
# @usage meeting ... display any events 15 minutes from now
# @usage meetings ... display todays events from iCal
# @see http://hasseg.org/icalBuddy/
#

[ -e /usr/local/bin/icalBuddy ] && {
    alias meeting='icalBuddy -ea -li 1 -f eventsFrom:"'$(date -v+15M)'" to:"'$(date -v+2H)'"'
    alias meetings='icalBuddy -sc -n -f -eep notes eventsToday'
}

#
# @usage google term ... google search the term
#

[ -e /usr/local/bin/html2text ] && {

    google () {
        local term="$@"
        term=${term// /%20}
        curl -s -A Mozilla http://www.google.com/search?q=$term | \
        html2text -style pretty -width 132 | more
    }

}

#
# KBM control
# @usage synergys server_name ... start synergy server
# @usage synergyc client_name server_name ... start synergy client
# @see http://synergy-foss.org/
#

[ -e ~/Applications/synergy ] && {
    alias synergys="killit synergys; ~/Applications/synergy/synergys -c ~/.synergy.conf -n $1 -f"
    alias synergyc="killit synergyc; ~/Applications/synergy/synergyc --name $1 -f $2"
}

#
# @usage ovftool ... https://www.vmware.com/support/developer/ovf/
# @see https://www.vmware.com/support/developer/ovf/ovf350/ovftool-350-userguide.pdf
#

[ -e '/Applications/VMware OVF Tool' ] && alias ovftool="/Applications/VMware\ OVF\ Tool/ovftool $*"

#
# MAMP utils
# @usage phplog ... tail the PHP error log
# @usage cleanmamp ... delete the pid files for apache and mysql
# @see http://www.mamp.info/en/
#

[ -e /Applications/MAMP ] && {
    alias phplog="tail -f /Applications/MAMP/logs/php_error.log"                   # Tail the php error log
    alias clean_mamp="cd /Applications/MAMP; find . -name "*.pid" | xargs rm -f"   # Clean MAMP pid files
}

#
# @usage rmDS_Store ... delete DS_Store files from the current directory
#

alias rmDS_Store='find . -name .DS_Store -exec rm {} \;'

#
# @usage fword word ... find a word in the OSX dictionary
#

[ -e /Applications/Dictionary.app ] && fword () { open dict:///"$@" ; }

#
# @usage subl ... crank up sublime. Open directory if no args
#

[ -e '/Applications/Sublime Text 2.app' ] && subl () {
    '/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' ${1:-'.'}
}

#
# @usage pman ... view man pages in Preview
#

pman () { man -t "$1" | open -f -a /Applications/Preview.app; }

#
# @usage fiosapp app_name ... find the persistent are for an iOS simulator app
#

ipsdir=~/Library/Application\ Support/iPhone\ Simulator/7.1/Applications
[ -e "$ipsdir" ] && fiosapp () {
    local guid=37 ## length of the GUID + slash
    local l=$(echo $ipsdir | awk '{print length}')
    find "$ipsdir" | grep -i "$@" | cut -c 1-$(($l + $guid)) | uniq
}
unset iPhoneSimDir

#
# @usage res ... show the resolution of the current screen
#

res() {
    osascript -e 'tell application "Finder" to get bounds of window of desktop' |
        sed -e 's/0, 0, \(.*\), \(.*\)/\1x\2/'
}

#
# @usage xcode ... open xcode for project under the current directory
#

[ -e /Applications/Xcode.app ] && {
    xcode() { find . -type d -depth 1 -name *.xcodeproj | xargs open; }
}


#
# @usage housekeeping ... housekeeping for things like npm and homebrew
#

housekeeping () {

    local msg="Shall I clean up your Mac system files for you?"; say "$msg"
    read -p "$(color yellow)$msg$(color) [Y/n] "
    [ "$REPLY" == "Y" ] && {
        say 'Ok.'
        sudo periodic daily weekly monthly  # run osx maint. scripts
        # @see http://www.macgasm.net/2013/01/18/good-morning-your-mac-keeps-a-log-of-all-your-downloads/
        $(sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent')
    }

    local msg="Shall I update your Homebrew environment for you?"; say "$msg"
    read -p "$(color yellow)$msg$(color) [Y/n] "
    [ "$REPLY" == "Y" ] && {
        say 'Ok.'
        brew update     # get homebrew up-to-date
        brew upgrade    # apply any updates
        brew cleanup    # clean up the crud
    }

    local msg="Shall I update your NPM environment for you?"; say "$msg"
    read -p "$(color yellow)$msg$(color) [Y/n] "
    [ "$REPLY" == "Y" ] && {
        local msg="Do you want me to clean out the NPM cache first?"; say "$msg"
        read -p "$(color yellow)$msg$(color) [Y/n] "
        [ "$REPLY" == "Y" ] && {
            sudo npm cache clean
        }
        say 'Ok.'
        sudo npm update -g  # get npm global packages up-to-date
        # Problems? Reinstall...
        # (curl https://npmjs.org/install.sh | sudo sh) && rm install.sh
    }

    say 'Ok. Housekeeping complete.'
}
