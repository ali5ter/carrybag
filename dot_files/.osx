#!/bin/bash
# @file .osx
# â˜…  Carrybag osx tweeks
# @author Alister Lewis-Bowen <alister@different.com>
# @see https://github.com/mathiasbynens/dotfiles/blob/master/.osx
# @see .bashrc

#
# Colors
#

export CLICOLOR=1

#
# Path exports
#

[ -d /Developer ] &&  export PATH=/Developer/Tools:/Developer/Applications:$PATH
[ -d /Applications/MAMP ] && export PATH=/Applications/MAMP/Library/bin:$PATH
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home
export PYTHONPATH=/usr/local/lib/python2.7/site-packages
export PATH=/usr/local/heroku/bin:$PATH # include Heroku Toolbelt
export PATH=/usr/local/bin:$PATH        # include any homebrew installed packages

#
# Aliases
#

alias ls='ls -FG $*'
alias wget='curl -O'    # since curl is native to OSX

#
# System tweeks
#

chflags nohidden ~/Library  # don't hide the Library dir

#
# Bootstrapping some apps using homebrew
# @see http://mxcl.github.com/homebrew/
#

$(which -s brew); [[ $? != 0 ]] && \
    ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
$(which -s git); [[ $? != 0 ]] && brew install git
[ ! -f $(brew --prefix)/etc/bash_completion ] && brew install bash-completion
[ ! -f $(brew --prefix)/bin/ctags ] && brew install ctags-exuberant
$(which -s fortune); [[ $? != 0 ]] && brew install fortune
$(which -s cowsay); [[ $? != 0 ]] && brew install cowsay

#
# Bootstrapping some apps using npm
# @see https://github.com/joyent/node/wiki/installation
# NOTE: Found that installing node using brew screws up permisstions.
#  @issacs recommendation: Go to http://nodejs.org/ and click the big green
#  button. It is also recommended to run npm using sudo (for global at least)
#

$(which -s node); [[ $? != 0 ]] && echo 'Install node from nodejs.org'
$(which -s jshint); [[ $? != 0 ]] && sudo npm install jshint -g
$(which -s node-inspector); [[ $? != 0 ]] && sudo npm install node-inspector -g
$(which -s nodemon); [[ $? != 0 ]] && sudo npm install nodemon -g

#
# Carrybag assumes bash completion is installed using Homebrew
# @see https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion
#

if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
fi

#
# Include git completion config
#

[ -e /Applications/Xcode.app/Contents/Developer/usr/share/git-core ] && {
    source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash
    source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-prompt.sh
    PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
}

#
# @usage drush ... manipulating Drupal installations
#

[ -e ~/bin/drush ] && alias drush='php ~/bin/drush/drush.php'

#
# @usage meetings ... display todays events from iCal
# meetings ... show all todays iCall events
# @see http://hasseg.org/icalBuddy/
#

[ -e /usr/local/bin/icalBuddy ] && alias meetings="icalBuddy -sc -n -f -eep notes eventsToday"

#
# KBM control
# @usage synergys server_name ... start synergy server
# @usage synergyc client_name server_name ... start synergy client
# @see http://synergy-foss.org/
#

if [ -e ~/Applications/synergy ]; then
    alias synergys="killit synergys; ~/Applications/synergy/synergys -c ~/.synergy.conf -n $1 -f"
    alias synergyc="killit synergyc; ~/Applications/synergy/synergyc --name $1 -f $2"
fi

#
# @usage ovftool ... https://www.vmware.com/support/developer/ovf/
# @see https://www.vmware.com/support/developer/ovf/ovf350/ovftool-350-userguide.pdf
#

[ -e '/Applications/VMware OVF Tool' ] && alias ovftool="/Applications/VMware\ OVF\ Tool/ovftool $*"

#
# MAMP utils
# @usage phplog ... tail the PHP error log
# @usage cleanmamp ... delete the pid files for apache and mysql
# @see http://www.mamp.info/en/
#

if [ -e /Applications/MAMP ]; then
    alias phplog="tail -f /Applications/MAMP/logs/php_error.log"                   # Tail the php error log
    alias clean_mamp="cd /Applications/MAMP; find . -name "*.pid" | xargs rm -f"   # Clean MAMP pid files
fi

#
# @usage rmDS_Store ... delete DS_Store files from the current directory
#

alias rmDS_Store='find . -name .DS_Store -exec rm {} \;'

#
# @usage fword word ... find a word in the OSX dictionary
#

[ -e /Applications/Dictionary.app ] && fword () { open dict:///"$@" ; }

#
# @usage subl ... crank up sublime. Open directory if no args
#

[ -e '/Applications/Sublime Text 2.app' ] && subl () {
    '/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' ${1:-'.'}
}

#
# @usage housekeeping ... housekeeping for things like npm and homebrew
#

housekeeping () {
    brew update     # get homebrew up-to-date
    brew upgrade    # apply any updates
    brew cleanup    # clean up the crud
    sudo npm update -g  # get npm global packages up-to-date
    # if there's a problem then we'd do...
    # (curl https://npmjs.org/install.sh | sudo sh) && rm install.sh
}
