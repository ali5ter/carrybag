#!/bin/bash
# ----------------------------------------------------------------------------
# @file drupal_backup_restore
# Simple script to backup/restore a Drupal site
# @author Alister Lewis-Bowen [alister@different.com]
# ----------------------------------------------------------------------------
# This software is distributed under the the MIT License.
#
# Copyright (c) 2009 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ----------------------------------------------------------------------------

DRUPAL_INSTALL_DIR=${DRUPAL_INSTALL_DIR:-/var/www/htdocs};

# Function: Help
# ----------------------------------------------------------------------------

help() {
	echo;
	echo -e "Usage:";
	echo -e "$0 [-q] -b|r [site_name] [backup_file_name]";
	echo;
	echo -e "where:";
	echo;
	echo -e "-q --quiet";
	echo -e "\tSupress output";
	echo;
	echo -e "-b --backup";
	echo -e "\tBackup the Drupal site directory, dump the database and";
	echo -e "\tpackage them into the archive file";
	echo;
	echo -e "-r --restore";
	echo -e "\tRestore the Drupal site directory and database";
	echo;
	echo -e "site_name";
	echo -e "\tThe site directory name under the Drupal sites directory";
	echo;
  echo -e "backup_file_name";
	echo -e "\tThe filename of the file to back up to";
	echo;
	echo -e "The Drupal installation directory is set to $DRUPAL_INSTALL_DIR.";
	echo -e "You can define this directory using the DRUPAL_INSTALL_DIR enviroment variable.";
	echo;
	exit 1;
}

true() { return '1'; }
false() { return '0'; }


# Function: Validate input
# ----------------------------------------------------------------------------

function validate_input() {
	if [ ! -d "${DRUPAL_SITE_DIR}" ]; then
		echo -e "** It appears the site directory, ${DRUPAL_SITE_DIR}, does not exist.  Aborting.\n"
		exit 1
	fi
	
	if [ ! -e "${DRUPAL_SITE_DIR}/settings.php" ]; then
		echo -e "** It appears the site directory, ${DRUPAL_SITE_DIR}, does not contain a settings.php file.  Aborting.\n"
		exit 1
	fi
}

# Function: Parse out DB credentials
# ----------------------------------------------------------------------------

function get_db_info() {
	DB_USER=`grep ^\\$db_url $DRUPAL_SITE_DIR/settings.php | sed -n 's/.*\/\(.*\):.*/\1/p'`;
	DB_PASWD=`grep ^\\$db_url $DRUPAL_SITE_DIR/settings.php | sed -n 's/.*:\(.*\)@.*/\1/p'`;
	DB_NAME=`grep ^\\$db_url $DRUPAL_SITE_DIR/settings.php | sed -n 's/.*\/\(.*\).;$/\1/p'`;
	DB_HOST=`grep ^\\$db_url $DRUPAL_SITE_DIR/settings.php | sed -n 's/.*@\(.*\)\/.*/\1/p'`;
	DB_PREFIX=`grep ^\\$db_prefix $DRUPAL_SITE_DIR/settings.php | sed -n "s/.*'\(.*\)';/\1/p"`;
}

# Function: Dump database and re-factor dump exluding tables
# ----------------------------------------------------------------------------

function dump_db() {
	mysqldump -h${DB_HOST} -u${DB_USER} -p${DB_PASWD} -d -e -q --compact --single-transaction --add-drop-table ${DB_NAME} > /tmp/${SITE_ID}_db.sql;
	for table in $(echo "show tables" | mysql -h${DB_HOST} -u${DB_USER} -p${DB_PASWD} ${DB_NAME} | grep -v -e ${EXCLUDE_TABLES}); do
		mysqldump -h${DB_HOST} -u${DB_USER} -p${DB_PASWD} -e -q -t --compact --skip-extended-insert --single-transaction --add-drop-table ${DB_NAME} ${table} >> /tmp/${SITE_ID}_db.sql;
	done
	echo "UPDATE \`$DB_PREFIX""users\` SET uid=0 WHERE name='';" >> /tmp/${SITE_ID}_db.sql;
}

# Function: Restore database
# ----------------------------------------------------------------------------

function restore_db() {
	local tmpDir=$1;
	for table in $(echo "show tables" | mysql -h${DB_HOST} -u${DB_USER} -p${DB_PASWD} ${DB_NAME} | grep -v -e ${EXCLUDE_TABLES}); do
	  echo "drop table ${table}" | mysql -h${DB_HOST} -u${DB_USER} -p${DB_PASWD} ${DB_NAME}
	done
	mysql --default-character-set=utf8 -h${DB_HOST} -u${DB_USER} -p${DB_PASWD} ${DB_NAME} < ${tmpDir}/*_db.sql;
}

# Function: Perform a backup
# ----------------------------------------------------------------------------

function backup() {
	start=$SECONDS
	
	if [ $QUIET == false ]; then echo "Starting to backup $SITE_ID"; fi;
	
	rm -f $BACKUP_FILE;
	
	if [ $QUIET == false ]; then echo -en "\tDumping the $SITE_ID database..."; fi;
	dump_db;
	if [ $QUIET == false ]; then echo -e "\tdone"; fi;
	
	cd /tmp
	
	if [ $QUIET == false ]; then echo -en "\tBacking up the $SITE_ID directory..."; fi;
	tar -cf ${SITE_ID}_site.tar ${DRUPAL_SITE_DIR}/.* 2>/dev/null;
	if [ $QUIET == false ]; then echo -e "\tdone"; fi;
	
	if [ $QUIET == false ]; then echo -en "\tArchiving to $BACKUP_FILE..."; fi;
	tar -czf "${BACKUP_FILE}" ${SITE_ID}*;
	if [ $QUIET == false ]; then echo -e "\tdone"; fi;
	
	cd "${CDIR}";
	
	end=$SECONDS
	if [ $QUIET == false ]; then echo -e  "Backup complete in $((end - start)) seconds.\n"; fi;
}

# Function: Perform a restore
# ----------------------------------------------------------------------------

function restore() {
	start=$SECONDS
	
	if [ ! -e "${BACKUP_FILE}" ]; then
		echo -e "** Unable to read the backup file, ${BACKUP_FILE}.  Aborting.\n"
		exit 1
	fi
	
	if [ $QUIET == false ]; then echo "Starting to restore $SITE_ID"; fi;
	
	local tmpDir=/tmp/$$;
	mkdir -p $tmpDir;
	cd $tmpDir;
	
	if [ $QUIET == false ]; then echo -en "\tUnarchiving from $BACKUP_FILE..."; fi;
	tar -xzf "${CDIR}/${BACKUP_FILE}";
	if [ $QUIET == false ]; then echo -e "\tdone"; fi;
	
	if [ $QUIET == false ]; then echo -en "\tRestore the $SITE_ID database..."; fi;
	restore_db $tmpDir;
	if [ $QUIET == false ]; then echo -e "\tdone"; fi;
	
	if [ $QUIET == false ]; then echo -en "\tRestore the $SITE_ID site..."; fi;
	tar -xf $tmpDir/*_site.tar;
	if [ $QUIET == false ]; then echo -e "\tdone"; fi;

	cd "${CDIR}";
	
	end=$SECONDS
	if [ $QUIET == false ]; then echo "Restore complete in $((end - start)) seconds."; fi;
}

# Parse args
# ----------------------------------------------------------------------------

if [ $# -eq 0 ]; then help; fi;
QUIET=false;
while (( "$#" )); do
	case "${1}" in
		-q | --quiet )		QUIET=true;;
		-b | --backup )		BACKUP=true;;
		-r | --restore )	BACKUP=false;;
		* )								break;;
	esac
	shift;
done

# Define globals
# ----------------------------------------------------------------------------

CDIR=`pwd`;
SITE_ID=${1:-default};
BACKUP_FILE=${2:-${CDIR}/${SITE_ID}.`date "+%s"`.tar};
DRUPAL_SITES_DIR=${DRUPAL_INSTALL_DIR}/sites;
DRUPAL_SITE_DIR=${DRUPAL_SITES_DIR}/${SITE_ID};
EXCLUDE_TABLES="^access$\|access_log\|cache\|search_index\|sessions\|^statistics$\|watchdog\|Tables_in";

#	Process
# ----------------------------------------------------------------------------

validate_input;
get_db_info;
if [ $QUIET == false ]; then echo; fi;
if [ $BACKUP == false ]; then restore; else backup; fi;

exit 1;