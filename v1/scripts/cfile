#!/bin/bash
# @file cfile
# â˜†  Create a file based on a template
# @author Alister Lewis-Bowen <alister@different.com>
# @requires color <http://code.google.com/p/ansi-color/>
#
# This software is distributed under the the MIT License.
#
# Copyright (c) 2012 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

WDIR=~/.cfile           # working dir
TMPLS=$WDIR/templates   # templates dir
CONFIG=$WDIR/config     # configuration file
TMPL=''                 # template name
EXT=''                  # extension name
FILE='newfile'          # new file name
TMPFILE=.cfile-XXXXXXXX # temp file name template

#
# Default template
#
TMPL=$(cat <<EOT
DESC:::Default template for all occasions (includes copyright)
EXT:::-
# @file %FILENAME%
# @author %AUTHOR%
# @copyright Copyright (c) %YEAR% %AUTHOR%. All rights reserved.
EOT
)

#
# Default metadata
#
DATA=$(cat <<EOD
AUTHOR:::$(id -P|cut -d':' -f8)
YEAR:::$(date +"%Y")
EOD
)

function _help {
    local helpText="
$(color bd)Create a new file using a template$(color)

$(color bd)cfile $(color ul)file$(color) will attempt to parse the extension from $(color ul)file$(color) to understand which template to use

Usage:
$(color bd)cfile [$(color ul)option$(color)$(color bd)] [$(color ul)file$(color bd)]$(color)

Options:
-t, --tmpl $(color ul)name$(color)  create file using the template $(color ul)name$(color)
-l, --list      list current templates
"
    echo "$helpText"
}

function _init {
    rm -f $WDIR 2>/dev/null
    mkdir -p $TMPLS
    echo "$TMPL" > $TMPLS/default
    echo "$DATA" > $CONFIG
}

function _addFilename {
    local _config=$(mktemp $TMPFILE)
    if [ "$(grep -c FILENAME $CONFIG)" -gt '0' ]; then
        sed '/FILENAME/d' $CONFIG > $_config
        mv $_config $CONFIG
    fi
    echo "FILENAME:::$FILE" >> $CONFIG
}

function _listTemplates {
    local tmpl
    local desc
    local ext
    printf "$(color white)%-15s $(color cyan)%-60s $(color blue)%-4s$(color)\n" Name Description Ext
    for tmpl in $(ls $TMPLS); do
        desc=$(grep DESC::: $TMPLS/$tmpl); desc=${desc#*:::}
        ext=$(grep EXT::: $TMPLS/$tmpl); ext=${ext#*:::}
        printf "$(color white)%-15s $(color cyan)%-60s $(color blue)%-4s$(color)\n" $tmpl "$desc" $ext
    done
    echo
}

function _error {
    local msg=$1
    echo "$(color red)$msg$(color)"
    _help
    exit 1
}

function _templateExists {
    local tmpl=$1
    if [ "$(ls $TMPLS|grep -c $tmpl)" -ne '1' ]; then
        echo "$(color red)Unable to find template named '$tmpl'$(color)"
        echo -e "\nAvailable templates:"
        _listTemplates
        exit 1
    fi
    TMPL=$tmpl
}

function _matchTemplate {
    local ext=$1
    local tmpls=()
    local tmpl
    # grab templates names that match
    while read -r tmpl; do
        tmpls+=($(basename $tmpl))
    done < <(find $TMPLS/*|xargs grep EXT:::|grep $ext|cut -d':' -f1)
    # ask which one to use if more than one
    if [ "${#tmpls[@]}" -gt 1 ]; then
        echo "$(color yellow)These are the templates which you could apply:$(color)"
        for (( i=0; i<${#tmpls[@]}; i++ )); do
            printf "$(color green)%3s) $(color yellow)%-15s$(color)\n" $i ${tmpls[$i]}
        done
        REPLY=$i
        ((i--))
        echo
        while [ $REPLY -lt 0 ] || [ $REPLY -gt $i ]; do
            read -p "$(color yellow)Which template would you like to use? (0-$i): $(color)"
        done
        TMPL=${tmpls[$REPLY]}
    else
        TMPL=${tmpls[0]}
    fi
}

function _createFile {
    # Copy tempalte with no metadata
    local _tmpl=$(mktemp $TMPFILE)
    if [ "$(grep -c ::: $TMPLS/$TMPL)" -gt '0' ]; then
        sed '/:::/d' $TMPLS/$TMPL > $_tmpl
    fi
    # Merge data into template copy and write to file
    local line
    local key
    local value
    local cmd='sed '
    while read line; do
        key=${line%%:::*}; value=${line#*:::}
        cmd=$cmd"-e \"s;%${key}%;${value};\" "
    done < "$CONFIG"
    cmd=$cmd"$_tmpl > $FILE"
    eval $cmd
    rm -f $_tmpl
}

[ ! -d $WDIR ] && _init     # create working directory
_addFilename

case "$1" in
    --help|-h)
        _help
        ;;
    --init)     # init the working directory
        _init
        ;;
    --config)     # show config data
        cat $CONFIG
        ;;
    --list|-l)  # list available templates
        _listTemplates
        ;;
    --tmpl|-t)  # create file using a given template name
        [ -z "$2" ] && _error "Please supply the template name"
        [ ! -z "$3" ] && FILE=$3; _addFilename
        _templateExists $2
        _createFile
        ;;
    *)          # create file using the file extension
        [ ! -z "$1" ] && FILE=$1; _addFilename
        _matchTemplate ${FILE##*.}
        _createFile
        ;;
esac
