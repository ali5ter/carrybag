#!/bin/bash
# Bouncing ball animation
# Code to help me remember tput commands and use of signals to run async
# functions such as the interaction and animations loops here
# Inspired by http://bruxy.regnet.cz/web/linux/EN/housenka-bash-game/

WIDTH=`tput cols`       # screen width
HEIGHT=`tput lines`     # screen height
XOFFSET=5               # viewport x offset
((XWIDTH=WIDTH-10-2))   # viewport width
YOFFSET=2               # viewport y offset
((YHEIGHT=HEIGHT-4-3)) # viewport height
XMIN=$XOFFSET           # viewport left
((XMAX=XOFFSET+XWIDTH)) # viewport right
YMIN=$YOFFSET           # viewport top
((YMAX=YOFFSET+YHEIGHT))# viewport bottom
DELAY=0.09              # delay to allow timing got animation loop
XDIR=-1                 # x direction
YDIR=-1                 # y direction
((X=(XWIDTH/2)+XOFFSET))    # initial x pos
((Y=(YHEIGHT/2)+YOFFSET))   # initial y pos
OX=0                    # obstical x pos
OY=0                    # obstical y pos
ODELAY=10               # obstical render delay
OCOORDS=''              # obstical co-ords
ONUM=0                  # obstical total
HITS=0                  # obsticals hit
WX=0                    # wormhole x pos
WY=0                    # wormhole y pos
WDELAY=50               # wormhole render delay
WCOORDS=''              # wormhole co-ords
WNUM=0                  # wormhole total
PORTS=0                 # wormhole ports

function drawFrame {
    for (( row=0; row<$HEIGHT; row++ )); do
        tput cup $row 0
        printf "$(color white white)$(tput el)$(color)"
    done
    let _xwidth=XWIDTH+2
    for (( row=$YMIN; row<$YMAX+2; row++ )); do
        tput cup $row $XMIN
        printf "%${_xwidth}s" " "
    done
}

function clearBall {
    tput cup $Y $X
    echo -n " "
}

function drawBall {
    tput cup $Y $X
    echo -n "$(color yellow)◎$(color)"
}

function drawStatus {
    tput cup $HEIGHT 0
    printf "$(color yellow blue)X:%3s Y:%3s Rocks:%3s Hits:%3s Portals:%3s Ports:%3s$(tput el)$(color)" $X $Y $ONUM $HITS $WNUM $PORTS
}

function borderCollision {
    if [ $X -gt $XMAX ] && [ $XDIR -eq 1 ]; then XDIR=-1
    elif [ $X -eq $XMIN ] && [ $XDIR -eq -1 ]; then XDIR=1
    fi
    if [ $Y -gt $YMAX ] && [ $YDIR -eq 1 ]; then YDIR=-1
    elif [ $Y -eq $YMIN ] && [ $YDIR -eq -1 ]; then YDIR=1
    fi
}

function drawObstical {
    [[ $((($RANDOM % $ODELAY) + 1)) -ne 1 ]] && return
    ((OX=(RANDOM % XWIDTH) + XOFFSET))
    ((OY=(RANDOM % $YHEIGHT) + YOFFSET))
    tput cup $OY $OX
    echo -n "$(color red)✦$(color)"
    OCOORDS=$OCOORDS"::$OX::$OY::"
    ((ONUM += 1))
}

function obsticalCollision {
    local _xy="::${X}::${Y}::";
    if [[ "$OCOORDS" =~ "$_xy" ]]; then
        if [ $XDIR -eq 1 ]; then XDIR=-1; else XDIR=1; fi
        #if [ $YDIR -eq 1 ]; then YDIR=-1; else YDIR=1; fi
        OCOORDS=$(echo $OCOORDS | sed -e "s/${_xy}//")
        tput cup $OY $OX
        echo -n ' '
        ((HITS += 1))
        ((ONUM -= 1))
    fi
}

function drawWormhole {
    [[ $((($RANDOM % $WDELAY) + 1)) -ne 1 ]] && return
    ((WX=(RANDOM % XWIDTH) + XOFFSET))
    ((WY=(RANDOM % $YHEIGHT) + YOFFSET))
    tput cup $WY $WX
    echo -n "$(color white)☼$(color)"
    WCOORDS=$WCOORDS"::$WX::$WY::"
    ((WNUM += 1))
}

function wormholeCollision {
    local _xy="::${X}::${Y}::";
    if [[ "$WCOORDS" =~ "$_xy" ]]; then
        clearBall
        ((X=(RANDOM % XWIDTH) + XOFFSET))
        ((Y=(RANDOM % $YHEIGHT) + YOFFSET))
        WCOORDS=$(echo $WCOORDS | sed -e "s/${_xy}//")
        tput cup $WY $WX
        echo -n ' '
        ((PORTS += 1))
        ((WNUM -= 1))
    fi
}

function move {
    # set up animation loop
    (sleep $DELAY && kill -ALRM $$) &
    # collision detection
    borderCollision
    obsticalCollision
    wormholeCollision
    # draw ball
    clearBall
    ((X=X+XDIR))
    ((Y=Y+YDIR))
    drawBall
    # add obsticals
    drawObstical
    drawWormhole
    # draw status line
    drawStatus
}

function initScreen {
    stty -echo  # turn off terminal echo
    tput civis  # make cursor invisible
    clear
    drawFrame
}

function restoreScreen {
    tput cvvis  # make cursor visible
    stty echo   # turn on terminal echo
    clear
}

initScreen

trap move ALRM  # animation loop on signal
move            # start animation loop

# interation loop
while true; do
    read -s -n 1 key
    case "$key" in
        p)  # pause animation loop
            trap '' ALRM
            sleep $DELAY
            ;;
        r)  # resume animation loop
            trap move ALRM
            move
            ;;
        x)  # exit
            restoreScreen
            trap exit ALRM  # end animation loop
            sleep $DELAY    # give animation loop time to end
            exit 0          # then exit
            ;;
    esac
done
