#!/bin/bash
#
# @file jump
# ☆  Script to create command for bookmarking directories and moving directly
#    to them using said bookmarks
# NOTE: Alias this to '. jump' so that cd will work outside the subshell, e.g.
#       alias jump='. ~/bin/jump'
# @author Alister Lewis-Bowen <alister@different.com>
# @requires color <http://code.google.com/p/ansi-color/>
#
# This software is distributed under the the MIT License.
#
# Copyright (c) 2012 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Working directory
#
WDIR=~/.jump
#
# Bookmark store
#
STORE=$WDIR/bookmarks

function _help {
    local helpText="
$(color bd)Bookmark directories and jump to them$(color)

$(color bd)jump $(color ul)name$(color) will move you to the directory \
bookmarked with $(color ul)name$(color)

Usage: $(color bd)jump [$(color ul)option$(color)$(color bd)] [$(color ul)name\
$(color)$(color bd)]$(color)

Options:
-a, --add $(color ul)name$(color)    bookmark current directory with \
$(color ul)name$(color)
-d, --delete $(color ul)name$(color)   delete bookmark $(color ul)name$(color)
-l, --list          list current bookmarked directories
"
    echo "$helpText"
}

function _exists {
    local matches=$(grep "^$1::" $STORE | wc -l)
    if [ "$matches" -gt "0" ]; then
        return 0
    fi
    return 1
}

[ ! -d $WDIR ] && mkdir -p $WDIR
[ ! -f $STORE ] && touch $STORE

case "$1" in
    ''|--help|-h)
        _help
        ;;
    #
    # Add a directory to the bookmarks store
    #
    add|--add|-a)
        if [ ! -z $2 ]; then
            _exists $2;
            if [ $? -eq 1 ]; then
                echo $2'::'$(pwd) >> $STORE
                echo "$(color green)Bookmark has been added$(color)"
            else
                echo "$(color yellow)This bookmark already exists:$(color)"
                jump list
            fi
        else
            _help
        fi
        ;;
    #
    # Delete a bookmark
    #
    rm|del|--delete|-d)
        if [ ! -z $2 ]; then
            _exists $2;
            if [ $? -eq 0 ]; then
                sed -i"*.bak" "/^$2::/d" $STORE &&
                    echo "$(color green)Bookmark has been deleted$(color)"
            else
                echo "$(color red)Unable to find a bookmark named, \
$(color bd)$2:$(color)"
                jump list
            fi
        else
            _help
        fi
        ;;
    #
    # List current bookmarked directories
    #
    list|--list|-l)
        current="$(color blue)►$(color)"
        badDir="$(color red)✖$(color)"
        while read line; do
            name=${line%::*}
            path=${line#*::}
            state=' '
            [ "$(pwd)" == "$path" ] && state=$current
            [ ! -d $path ] && state=$badDir
            printf "%1s $(color white)%-10s $(color cyan)%-60s$(color)\n" \
"$state" "$name" "$path"
        done < $STORE
        echo
        ;;
    #
    # cd to the bookmarked directory
    #
    *)
        _exists $1;
        if [ $? -eq 0 ]; then
            bm=$(grep $1 $STORE)
            cd ${bm#*::}
        else
            echo "$(color red)Unable to find '$1'$(color)"
        fi
        ;;
esac
