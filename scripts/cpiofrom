#!/bin/bash
# ----------------------------------------------------------------------------
# @file cpiofrom
# Wrapper for cpio'ing a remote dir structure over ssh 
# @see color
# @author Alister Lewis-Bowen [alister@different.com]
# ----------------------------------------------------------------------------
# This software is distributed under the the MIT License.
#
# Copyright (c) 2008 Alister Lewis-Bowen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ----------------------------------------------------------------------------

_PWD=$PWD;
URI=$1;
LOG=/tmp/cpioto.log;

# Function: Help
# ----------------------------------------------------------------------------

function help {
        echo;
        echo "$(color bd)Wrapper for cpio to transfer a remote dir structure to this machine via ssh.$(color)";
        echo;
        echo 'Usage:';
        echo "$(color bd)cpiofrom$(color) user@hostname/path";
        echo "$(color bd)cpiofrom$(color) [ -h | --help ]";
        echo;
        echo 'Examples:';
        echo '  cpiofrom alister@green.different.com:projects/site/htdocs';
        echo 'pulls the entire htdocs directory down to the current directory';
        echo;
        exit 1;
}

# Function: URI Parser
# Source: http://valeriu.palos.ro/537/uri-parsing-using-bash-built-in-features/
# ----------------------------------------------------------------------------

function uri_parser() {
    # uri capture
    uri="$@"

    # safe escaping
    uri="${uri//\`/%60}"
    uri="${uri//\"/%22}"

    # top level parsing
    pattern='^(([a-z]{3,5})://)?((([^:\/]+)(:([^@\/]*))?@)?([^:\/?]+)(:([0-9]+))?)(\/[^?]*)?(\?[^#]*)?(#.*)?$'
    [[ "$uri" =~ $pattern ]] || return 1;

    # component extraction
    uri=${BASH_REMATCH[0]}
    uri_schema=${BASH_REMATCH[2]}
    uri_address=${BASH_REMATCH[3]}
    uri_user=${BASH_REMATCH[5]}
    uri_password=${BASH_REMATCH[7]}
    uri_host=${BASH_REMATCH[8]}
    uri_port=${BASH_REMATCH[10]}
    uri_path=${BASH_REMATCH[11]}
    uri_query=${BASH_REMATCH[12]}
    uri_fragment=${BASH_REMATCH[13]}

    # path parsing
    count=0
    path="$uri_path"
    pattern='^/+([^/]+)'
    while [[ $path =~ $pattern ]]; do
        eval "uri_parts[$count]=\"${BASH_REMATCH[1]}\""
        path="${path:${#BASH_REMATCH[0]}}"
        let count++
    done

    # query parsing
    count=0
    query="$uri_query"
    pattern='^[?&]+([^= ]+)(=([^&]*))?'
    while [[ $query =~ $pattern ]]; do
        eval "uri_args[$count]=\"${BASH_REMATCH[1]}\""
        eval "uri_arg_${BASH_REMATCH[1]}=\"${BASH_REMATCH[3]}\""
        query="${query:${#BASH_REMATCH[0]}}"
        let count++
    done

    # return success
    return 0
}

# Parse input arguments
# ----------------------------------------------------------------------------

if [[ "$1" = '-h' || "$1" = '--help' || -z "$1" ]]; then help; fi;

uri_parser "$URI";

if [[ -z $uri_user || -z $uri_host || -z $uri_path ]]; then 
    echo "$(color red)This argument is incorrect. Try using the format user@host/path$(color)"; 
    exit 1;
fi

uri_path=${uri_path:1}

# Process the transfer
# ----------------------------------------------------------------------------

echo "$(color green)Fetching data from $uri_path on $uri_host as $uri_user...$(color)";

ssh $uri_user@$uri_host "find $uri_path -depth -print | cpio -oaV" | cpio -imVd;

echo "$(color green)Finished$(color)";

exit 0;
