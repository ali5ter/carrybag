#!/bin/bash
# Bouncing ball animation
# Code to help me remember tput commands and use of signals to run async
# functions such as the interaction and animations loops here
# Inspired by http://bruxy.regnet.cz/web/linux/EN/housenka-bash-game/

WIDTH=`tput cols`       # screen width
HEIGHT=`tput lines`     # screen height
XOFFSET=0               # viewport x offset
((XWIDTH=WIDTH-2))      # viewport width
YOFFSET=0               # viewport y offset
((YHEIGHT=HEIGHT-3))    # viewport height
XMIN=$XOFFSET           # viewport left
((XMAX=XOFFSET+XWIDTH)) # viewport right
YMIN=$YOFFSET           # viewport top
((YMAX=YOFFSET+YHEIGHT))# viewport bottom
DELAY=0.09              # delay to allow timing got animation loop
XDIR=-1                 # x direction
YDIR=-1                 # y direction
((X=(XWIDTH/2)+XOFFSET))    # initial x pos
((Y=(YHEIGHT/2)+YOFFSET))   # initial y pos

function drawFrame {
    for row in `seq 0 $HEIGHT`; do
        tput cup $row 0
        printf "$(color white)%${WIDTH}s$(color)" " "
    done
    for row in `seq $YOFFSET $YHEIGHT`; do
        tput cup $row $XOFFSET
        printf "%${XWIDTH}s" " "
    done
}

function clearBall {
    tput cup $Y $X
    echo -n " "
}

function drawBall {
    tput cup $Y $X
    echo -n "$(color red)â€¢$(color)"
}

function drawStatus {
    tput cup $HEIGHT 0
    printf "$(color yellow blue)X:%3s Y:%3s$(tput el)$(color)" $X $Y
}

function move {
    # set up animation loop
    (sleep $DELAY && kill -ALRM $$) &
    # check collision
    if [ $X -gt $XMAX ] && [ $XDIR -eq 1 ]; then
        XDIR=-1
    elif [ $X -eq $XMIN ] && [ $XDIR -eq -1 ]; then
        XDIR=1
    fi
    if [ $Y -gt $YMAX ] && [ $YDIR -eq 1 ]; then
        YDIR=-1
    elif [ $Y -eq $YMIN ] && [ $YDIR -eq -1 ]; then
        YDIR=1
    fi
    # draw ball
    clearBall
    ((X=X+XDIR))
    ((Y=Y+YDIR))
    drawBall
    # draw status line
    drawStatus
}

function initScreen {
    stty -echo  # turn off terminal echo
    tput civis  # make cursor invisible
    clear
    drawFrame
}

function restoreScreen {
    tput cvvis  # make cursor visible
    stty echo   # turn on terminal echo
    clear
}

initScreen

trap move ALRM  # animation loop on signal
move            # start animation loop

# interation loop
while true; do
    read -s -n 1 key
    case "$key" in
        p)  # pause animation loop
            trap '' ALRM
            sleep $DELAY
            ;;
        r)  # resume animation loop
            trap move ALRM
            move
            ;;
        x)  # exit
            restoreScreen
            trap exit ALRM  # end animation loop
            sleep $DELAY    # give animation loop time to end
            exit 0          # then exit
            ;;
    esac
done
